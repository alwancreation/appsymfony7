<?phpnamespace App\Controller\Admin;use App\Entity\User;use Doctrine\ORM\EntityManagerInterface;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;use Symfony\Component\Routing\Attribute\Route;#[Route('/users')]class UsersController extends AbstractController{    private $em;    function __construct(EntityManagerInterface $em)    {        $this->em = $em;    }    #[Route('/', name: 'users', methods: ['GET'])]    public function indexAction()    {        $users = $this->em->getRepository(User::class)->findAll();        return $this->render('admin/users/index.html.twig', array(            'users' => $users,        ));    }    #[Route('/create', name: 'users_create', methods: ['POST'])]    public function createAction(Request $request, UserPasswordHasherInterface $passwordHasher = null)    {        $user = new User();        $form = $this->createCreateForm($user);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $user->setEnabled(true);            $user->setFirstName($form->getData()->getFirstName());            $user->setLastName($form->getData()->getLastName());            $user->setEmail($form->getData()->getEmail());            $user->setPassword($passwordHasher->hashPassword($user,$user->getPassword()));            // $this->>em->updateUser($user, false);            $this->em->persist($user);            $this->em->flush();            return $this->redirect($this->generateUrl('users'));        }        return $this->render('admin/users/new.html.twig', array(            'entity' => $user,            'form' => $form->createView(),        ));    }    /**     * Creates a form to create a User entity.     *     * @param User $entity The entity     *     * @return \Symfony\Component\Form\Form The form     */    private function createCreateForm(User $entity)    {        return $this->createForm('App\Form\UserType', $entity, array(            'action' => $this->generateUrl('users_create'),            'method' => 'POST',        ));    }    #[Route('/new', name: 'users_new', methods: ['GET'])]    public function newAction()    {        $entity = new User();        $form = $this->createCreateForm($entity);        return $this->render('admin/users/new.html.twig', array(            'entity' => $entity,            'form' => $form->createView(),            'users_menu' => true,        ));    }    #[Route('/{id}/edit', name: 'users_edit', methods: ['GET'])]    public function editAction($id)    {        $entity = $this->em->getRepository(User::class)->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find User entity.');            }        $editForm = $this->createEditForm($entity);        $deleteForm = $this->createDeleteForm($id);        $editFormPassword = $this->createEditFormPassword($entity);        $editFormRole = $this->createFormBuilder()            ->add('role', ChoiceType::class, array(                'multiple' => true,                'attr'=>array(                    'class'=>'multicheckbox form-control',                    'style'=> 'height:300px'                ),                'choices'=>$entity->getRolesArrayKies(),                'data'=>$entity->getRoles(),            ))->setAction($this->generateUrl('user_update_role', array('id' => $entity->getId())))            ->getForm();        return $this->render('admin/users/edit.html.twig', array(            'entity' => $entity,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),            'edit_form_password' => $editFormPassword->createView(),            'users_menu' => true,            'edit_form_role' => $editFormRole->createView(),        ));    }    #[Route('/show/{id}', name: 'users_show_profile', methods: ['GET'])]    public function showAction($id)    {        $entity = $this->em->getRepository(User::class)->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find User entity.');        }        return $this->render('admin/users/show.html.twig',  array(            'user' => $entity,        ));    }    /**     * Creates a form to edit a Employe entity.     *     * @param \App\Entity\User $entity The entity     * @return \Symfony\Component\Form\Form The form     */    private function createEditFormPassword(\App\Entity\User $entity)    {        return $this->createForm('App\Form\UserPasswordType', $entity, array(            'action' => $this->generateUrl('user_update_password', array('id' => $entity->getId())),        ));    }    #[Route('/updatepassword/{id}', name: 'user_update_password', methods: ['POST'])]    public function updatepasswordAction(Request $request, User $user, UserPasswordHasherInterface $passwordHasher = null)    {        $editForm = $this->createEditFormPassword($user);        $editForm->handleRequest($request);        if ($editForm->isSubmitted() && $editForm->isValid()) {            $user->setPassword($passwordHasher->hashPassword($user,$user->getPassword()));            $user->getEnabled($editForm->getData()->getEnabled());            $this->em->persist($user);            $this->em->flush();            return $this->redirect($this->generateUrl('users_edit', array('id' => $user->getId())));        }        return $this->redirect($this->generateUrl('users'));    }    #[Route('/setrole/{id}', name: 'user_update_role', methods: ['POST'])]    public function setroleAction(Request $request, $id)    {        $user = $this->em->getRepository(User::class)->find($id);        if (!$user) {            throw $this->createNotFoundException('Unable to find User entity.');        }        $user = $user->removeAllRoles();        $post = Request::createFromGlobals();        $roles = $post->request->get('form');        if (isset($roles['role']) && is_array($roles['role'])) {            foreach ($roles['role'] as $roleName) {                $user->addRole($roleName);            }        }        $this->em->persist($user);        $this->em->flush();        return $this->redirect($this->generateUrl('users_edit', array('id' => $id)));    }    /**     * Creates a form to edit a User entity.     *     * @param User $entity The entity     *     * @return \Symfony\Component\Form\Form The form     */    private function createEditForm(User $entity)    {        return $this->createForm('App\Form\UserEditType', $entity, array(            'action' => $this->generateUrl('users_update', array('id' => $entity->getId())),        ));    }    #[Route('/{id}', name: 'users_update', methods: ['POST'])]    public function updateAction(Request $request, $id)    {        $entity = $this->em->getRepository(User::class)->find($id);        if (!$entity) {            throw $this->createNotFoundException('Unable to find User entity.');        }        $deleteForm = $this->createDeleteForm($id);        $editForm = $this->createEditForm($entity);        $editForm->handleRequest($request);        if ($editForm->isSubmitted() && $editForm->isValid()) {//            $entity->uploadImage();//            $entity->uploadCv();            $this->em->flush();            return $this->redirect($this->generateUrl('users_edit', array('id' => $id)));        }        return $this->render('admin/users/edit.html.twig',  array(            'entity' => $entity,            'edit_form' => $editForm->createView(),            'delete_form' => $deleteForm->createView(),        ));    }    #[Route('/{id}', name: 'users_delete', methods: ['DELETE'])]    public function deleteAction(Request $request, $id)    {        $form = $this->createDeleteForm($id);        $form->handleRequest($request);        if ($form->isSubmitted() && $form->isValid()) {            $entity = $this->em->getRepository(User::class)->find($id);            if (!$entity) {                throw $this->createNotFoundException('Unable to find User entity.');            }            $this->em->remove($entity);            $this->em->flush();        }        return $this->redirect($this->generateUrl('users'));    }    /**     * Creates a form to delete a User entity by id.     *     * @param mixed $id The entity id     *     * @return \Symfony\Component\Form\Form The form     */    private function createDeleteForm($id)    {        return $this->createFormBuilder()            ->setAction($this->generateUrl('users_delete', array('id' => $id)))            ->setMethod('DELETE')            ->getForm();    }}